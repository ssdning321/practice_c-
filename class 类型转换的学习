#include <iostream>
using namespace std;

//template <class T>
/*void swap_p(T& a, T& b) {
	T temp = a;
	a = b;
	b = temp;
}*/
/*void swap_e(int& a, int b = 0);
int main() {
	int a = 2;
	int b = 3;
	swap_e(a);
	cout << a<<b<< endl;
	return 0;
}

void swap_e(int& a, int b) {
	a = b;
	return;
}*/
class Oblong {
	double longth;
	double weight;
public:
	Oblong(double a=0, double b=0);
	Oblong(const Oblong& others);
	Oblong operator+(const Oblong& others)const;
	void show_area() {cout<< longth * weight<<endl;}
	void sum_longth(double x) { longth += x; }
	void sum_weight(double x) { weight += x; }
	friend void show_its_area(Oblong it);
	explicit operator double() {
		return longth;
	}
	Oblong& operator+(double x) {
		longth += x;
		weight += x;
		return *this;
	}
	friend Oblong& operator+(double b,Oblong& a);
};

Oblong::Oblong(double a, double b):longth(a),weight(b) {
	cout << "struct" << endl;
}

Oblong::Oblong(const Oblong& others) {
	weight = others.weight;
	longth = others.longth;
	cout << "copy" << endl;
}

Oblong Oblong::operator+(const Oblong& others)const {
	Oblong ret(this->weight + others.weight, this->longth + others.longth);
	return ret;
}

void show_its_area(Oblong it){
	cout<<it.longth<< endl;
}

Oblong& operator+(double b,Oblong& a) {
	a.longth += b;
	a.weight += b;
	return a;
}

int main() {
	Oblong obl(7,6.5);
	//show_its_area(5);
	//double a = (double)obl;
	//cout << a<< endl;
	obl = 5 + obl;
	cout << (double)obl << endl;
	cout << "end" << endl;
	return 0;
}

