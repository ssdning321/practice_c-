给定一个整数数组和一个整数 k ，请找到该数组中和为 k 的连续子数组的个数。
思路：
哈希表 前任意个数的和，后一个存储这个值的数量
遍历数组 找到满足该值的前n项和减去 前面任意i前n项和的值（他俩前n项和的差值）等于k 即为满足条件；
即从哈希表中找到 sum-k 的值（前面任意i前n项和的值）的数量有多少个；
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int sum=0,res=0;
        unordered_map<int,int> hash;
        hash[0]=1;//当sum==k时候（sum-k==0） 前n项和等于k 此时至少有一个从0到n
        for(int i:nums){
            sum+=i;
            if(hash.find(sum-k)!=hash.end())
                res+=hash[sum-k];
            hash[sum]++;
        }
        return res;
    }
};
给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。
把0当作-1 此题变成 找到和为0的连续数组最大长度
hash表 前一个存储前n项和，后一个存储索引，如果和相同就取最小的索引：因为是求最大长度。
当前一个i的sum 等于 j的sum时，说明中间的值相加和为0；
class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int res=0;
        int n=nums.size();
        unordered_map<int,int> hash;
        hash[0]=-1;
        int sum=0;
        for(int i=0;i<n;i++){
            if(nums[i]) sum++;
            else sum--;
            if(hash.find(sum)!=hash.end())
                res=max(res,i-hash[sum]);
            else hash[sum]=i;
        }
        return res;
    }
};
给定一个二维矩阵 matrix，以下类型的多个请求：

计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2) 。
实现 NumMatrix 类：

NumMatrix(int[][] matrix) 给定整数矩阵 matrix 进行初始化
int sumRegion(int row1, int col1, int row2, int col2) 返回左上角 (row1, col1) 、右下角 (row2, col2) 的子矩阵的元素总和。
同前两题
class NumMatrix {
public:
    vector<vector<int>> storage;
    NumMatrix(vector<vector<int>>& matrix) {
        int n=matrix.size(),m=matrix[0].size();
        storage.resize(n+1,vector<int>(m+1,0));
        for(int j=0;j<m;j++)
            storage[0][j+1]=matrix[0][j]+storage[0][j];
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=0;j<m;j++){
                sum+=matrix[i][j];
                storage[i+1][j+1]=storage[i][j+1]+sum;
            }
        }
    }

    int sumRegion(int row1, int col1, int row2, int col2) {
        return storage[row1][col1]-
        storage[row1][col2+1]-storage[row2+1][col1]
        +storage[row2+1][col2+1];
    }
};
