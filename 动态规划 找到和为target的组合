给定一个非空的正整数数组 nums ，请判断能否将这些数字分成元素和相等的两部分。
转化为 找到和为总和的一半问题----->

给定一个正整数数组 nums 和一个整数 target 。

向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：

例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。
返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。
总和sum=add+subtract  target=add-subtract subtract=sum-target>>1
转化为求和为subtract的问题
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum=0;
        for(int x:nums) sum+=x;
        target=sum-target;
        if(target<0||target&1) return 0;
        target>>=1;
        int dp[1001];
        memset(dp,0,sizeof(dp));
        dp[0]=1;
        for(int x:nums)
            for(int i=target;i>=x;i--)
                dp[i]+=dp[i-x];
        return dp[target];
    }
};
