给你一个整数数组 arr 和一个整数 difference，请你找出并返回 arr 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 difference 。

子序列 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 arr 派生出来的序列。

//都已经写了n行，当想到动态规划的时候，就如听仙乐耳暂鸣；
class Solution {
public:
    int longestSubsequence(vector<int>& arr, int difference) {
        unordered_map<short,int> hash;
        int n=arr.size();
        vector<short> dp(n,1);
        auto it=hash.end();
        int ret=1;
        for(int i=0;i<n;i++){
            short temp=arr[i]-difference;
            if(hash.find(temp)!=it){
                dp[i]=dp[hash[temp]]+1;
                if(dp[i]>ret) ret=dp[i];    
            }
            hash[arr[i]]=i;
        }
        return ret;
    }
};
//更妙的办法，哈希表没有初始化默认为0；
class Solution {
public:
    int longestSubsequence(vector<int> &arr, int difference) {
        int ans = 0;
        unordered_map<int, int> dp;
        for (int v: arr) {
            dp[v] = dp[v - difference] + 1;
            ans = max(ans, dp[v]);
        }
        return ans;
    }
};
