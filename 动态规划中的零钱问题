给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。
计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。

给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。
请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。
假设每一种面额的硬币有无限个。 

两题的区别：第二个题目不能重复选择，而第一个题可以重复选择 循环遍历顺序不同
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,amount+1);
        dp[0]=0;

        for(int x:coins){
            for(int i=1;i<=amount;i++){//区别在这里
                if(i>=x) dp[i]=min(dp[i],dp[i-x]+1);
            }
        }
        return dp[amount]>amount?-1:dp[amount];
    }
};


class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<int> dp(amount + 1);
        dp[0] = 1;
        for (int& coin : coins) {
            for (int i = coin; i <= amount; i++) {//区别在这里
                dp[i] += dp[i - coin];
            }
        }//不会重复计算上一个 先列举出所有的第一个情况.
        return dp[amount];
    }
};

