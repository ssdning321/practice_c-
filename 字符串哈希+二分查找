给你一个字符串 s ，考虑其所有 重复子串 ：即，s 的连续子串，在 s 中出现 2 次或更多次。这些出现之间可能存在重叠。

返回 任意一个 具有最长长度的重复子串。如果 s 不含重复子串，那么答案为 "" 。

字符串哈希+二分查找
尽量选则质数 不容易碰撞
对长度进行二分查找 不同于常规的二分查找

class Solution {
    unordered_set<unsigned long long> set;
public:
    int n;
    unsigned long long prime = 31;
    unsigned long long power;
    unsigned long long hash;
    int find(string s,int len){
        set.clear();
        power=1;
        hash=0;
        for(int i=0;i<len;i++){
            hash=hash*prime+(s[i]-'a');
            power*=prime;
        }
        set.insert(hash);
        for(int i=len;i<n;i++){
            hash=hash*prime-power*(s[i-len]-'a')+(s[i]-'a');
            if(set.count(hash)) return i-len+1;
            set.insert(hash);
        }
        return -1;
    }
    string longestDupSubstring(string s) {
        n=s.size();
        int l=1,r=n-1;
        int pos=-1,len=0;
        while(l<=r){
            int mid=l+r>>1;
            int target=find(s,mid);
            if(target!=-1){
                len=mid;
                pos=target;
                l=mid+1;
            }
            else r=mid-1;
        }
        if(pos==-1) return "";
        else return s.substr(pos,len);
    }
};
