有一组 n 个人作为实验对象，从 0 到 n - 1 编号，其中每个人都有不同数目的钱，以及不同程度的安静值（quietness）。为了方便起见，我们将编号为 x 的人简称为 "person x "。

给你一个数组 richer ，其中 richer[i] = [ai, bi] 表示 person ai 比 person bi 更有钱。另给你一个整数数组 quiet ，其中 quiet[i] 是 person i 的安静值。richer 中所给出的数据 逻辑自恰（也就是说，在 person x 比 person y 更有钱的同时，不会出现 person y 比 person x 更有钱的情况 ）。

现在，返回一个整数数组 answer 作为答案，其中 answer[x] = y 的前提是，在所有拥有的钱肯定不少于 person x 的人中，person y 是最安静的人（也就是安静值 quiet[y] 最小的人）。



class Solution {
public:
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet){
        int n=quiet.size();
        vector<vector<int>> small_index(n,vector<int>({}));
        vector<int> in_number(n,0);
        for(auto &r:richer){
            //构建一个 r[0]->r[1]有向图
            small_index[r[0]].emplace_back(r[1]);
            //记录有几个指向r[i]
            in_number[r[1]]++;
        }
        vector<int> res(n);
        for(int i=0;i<n;i++) res[i]=i;
        stack<int> s;
        //添加没有被指向的到栈中
        for(int i=0;i<n;i++){if(in_number[i]==0) s.push(i);}
        //当i被添加到栈中时，证明指向i的已经被处理或者没有指向i的
        while(!s.empty()){
            int x=s.top();s.pop();//处理
            for(int i:small_index[x]){
                if(quiet[res[x]]<quiet[res[i]]) res[i]=res[x];
                if(--in_number[i]==0) s.push(i);//减少一个指向i的
            }
        }
        return res;
    }
};
