
这里有 n 门不同的在线课程，按从 1 到 n 编号。给你一个数组 courses ，其中 courses[i] = [durationi, lastDayi] 表示第 i 门课将会 持续 上 durationi 天课，并且必须在不晚于 lastDayi 的时候完成。

你的学期从第 1 天开始。且不能同时修读两门及两门以上的课程。

返回你最多可以修读的课程数目。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/course-schedule-iii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        sort(courses.begin(),courses.end(),
        [](vector<int> &a,vector<int> &b){return a[1]<b[1];});
        priority_queue<int> que;
        int total=0;
        for(auto &v:courses){
            if(total+v[0]<=v[1]){
                total+=v[0];
                que.push(v[0]);
            }
            else if(!que.empty()&&que.top()>v[0]){
            //&&total+v[0]-que.top()<=v[1]
            //为什么这个可以省略？
            //因为 被删除的 a0和a1 
            //已知 a0<b1并且a1<b1
            //故b1,b0一定能替换a1,a0
                total+=(v[0]-que.top());
                que.pop();
                que.push(v[0]);
            }
        }
        return que.size();
    }
};
